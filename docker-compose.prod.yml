version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: carbon-emission-postgres-prod-0527
    environment:
      POSTGRES_DB: carbon_emission_db
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - carbon-emission-network-prod-0527
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: carbon-emission-redis-prod-0527
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - carbon-emission-network-prod-0527
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: carbon-emission-nginx-prod-0527
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    networks:
      - carbon-emission-network-prod-0527
    restart: always

  # NestJS 后端服务 (生产模式)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: carbon-emission-backend-prod-0527
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: carbon_emission_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
    expose:
      - "3001"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - carbon-emission-network-prod-0527
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # React 前端服务 (生产模式)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: carbon-emission-frontend-prod-0527
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-/api/v1}
      REACT_APP_ENV: production
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - carbon-emission-network-prod-0527
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Python FastAPI 数据服务 (生产模式)
  data-service:
    build:
      context: ./data-service
      dockerfile: Dockerfile.prod
    container_name: carbon-emission-data-service-prod-0527
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://${DB_USERNAME:-postgres}:${DB_PASSWORD}@postgres:5432/carbon_emission_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      DEBUG: false
      HOST: 0.0.0.0
      PORT: 8000
    expose:
      - "8000"
    volumes:
      - ./data-service/logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - carbon-emission-network-prod-0527
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
  redis_data_prod:


networks:
  carbon-emission-network-prod-0527:
    driver: bridge
