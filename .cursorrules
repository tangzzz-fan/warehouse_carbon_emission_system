# 冷库物流园区碳排放检测管理系统 - Cursor 开发规则

## 项目概述
这是一个冷库物流园区的碳排放检测管理系统，提供后台面板展示和管理功能。
技术栈：NestJS (后端) + React (前端) + Ant Design (UI) + Python FastAPI (数据服务)

## 技术栈规范

### 后端 (NestJS)
- 使用 TypeScript 严格模式
- 遵循 NestJS 官方架构模式：Controller -> Service -> Repository
- 使用 class-validator 进行数据验证
- 使用 class-transformer 进行数据转换
- 统一使用 DTO (Data Transfer Object) 模式
- 数据库操作使用 TypeORM 或 Prisma
- 环境配置使用 @nestjs/config
- 日志记录使用 @nestjs/common Logger
- API 文档使用 @nestjs/swagger

### 前端 (React + Ant Design)
- 使用 TypeScript 严格模式
- 使用 React 18+ 函数组件和 Hooks
- 状态管理优先使用 Zustand，复杂场景考虑 Redux Toolkit
- 路由使用 React Router v6
- HTTP 请求使用 Axios 并封装统一的 API 客户端
- 表单处理使用 Ant Design Form 组件
- 图表展示使用 @ant-design/charts 或 ECharts
- 样式使用 CSS Modules 或 styled-components

### Python FastAPI (数据服务)
- 使用 Python 3.9+
- 遵循 PEP 8 代码规范
- 使用 Pydantic 进行数据验证
- 异步编程使用 async/await
- 数据库操作使用 SQLAlchemy 2.0+
- API 文档自动生成

## 项目结构规范

### 后端目录结构
```
backend/
├── src/
│   ├── modules/           # 业务模块
│   │   ├── auth/         # 认证模块
│   │   ├── carbon/       # 碳排放管理
│   │   ├── warehouse/    # 冷库管理
│   │   ├── logistics/    # 物流管理
│   │   └── dashboard/    # 仪表板
│   ├── common/           # 公共模块
│   │   ├── decorators/   # 装饰器
│   │   ├── filters/      # 异常过滤器
│   │   ├── guards/       # 守卫
│   │   ├── interceptors/ # 拦截器
│   │   └── pipes/        # 管道
│   ├── config/           # 配置文件
│   └── database/         # 数据库相关
├── test/                 # 测试文件
└── docs/                 # 文档
```

### 前端目录结构
```
frontend/
├── src/
│   ├── components/       # 通用组件
│   ├── pages/           # 页面组件
│   │   ├── dashboard/   # 仪表板
│   │   ├── carbon/      # 碳排放管理
│   │   ├── warehouse/   # 冷库管理
│   │   └── logistics/   # 物流管理
│   ├── hooks/           # 自定义 Hooks
│   ├── services/        # API 服务
│   ├── stores/          # 状态管理
│   ├── utils/           # 工具函数
│   ├── types/           # TypeScript 类型定义
│   └── assets/          # 静态资源
├── public/              # 公共资源
└── docs/                # 文档
```

## 代码规范

### 命名规范
- 文件名：使用 kebab-case (如：carbon-emission.service.ts)
- 类名：使用 PascalCase (如：CarbonEmissionService)
- 变量/函数名：使用 camelCase (如：calculateEmission)
- 常量：使用 UPPER_SNAKE_CASE (如：MAX_TEMPERATURE)
- 接口：使用 I 前缀 (如：ICarbonData)
- 类型：使用 T 前缀 (如：TEmissionLevel)

### 注释规范
- 所有公共 API 必须有 JSDoc 注释
- 复杂业务逻辑必须有中文注释说明
- 碳排放计算公式必须详细注释
- 温度监控阈值设置必须注释说明

### Git 提交规范
使用 Conventional Commits 格式：
- feat: 新功能
- fix: 修复
- docs: 文档
- style: 格式
- refactor: 重构
- test: 测试
- chore: 构建/工具

示例：
```
feat(carbon): 添加碳排放实时监控功能
fix(warehouse): 修复冷库温度异常报警逻辑
docs(api): 更新碳排放API文档
```

## 业务领域规范

### 碳排放相关
- 所有碳排放数据使用 CO2 当量 (CO2e) 单位
- 排放因子数据必须可配置和更新
- 计算结果保留小数点后 2 位
- 支持多种排放源：电力、燃料、制冷剂等

### 冷库管理相关
- 温度数据精确到 0.1°C
- 湿度数据精确到 0.1%
- 能耗数据使用 kWh 单位
- 支持多区域、多温区管理

### 数据处理规范
- 所有时间使用 ISO 8601 格式
- 数据库时间统一使用 UTC
- 前端显示时间转换为本地时区
- 大数值使用千分位分隔符显示

## 安全规范

### 认证授权
- 使用 JWT 进行身份认证
- 实现基于角色的访问控制 (RBAC)
- 敏感操作需要二次验证
- API 接口必须有权限验证

### 数据安全
- 敏感数据必须加密存储
- 数据传输使用 HTTPS
- 实现数据脱敏显示
- 定期备份重要数据

## 性能规范

### 前端性能
- 组件懒加载
- 图片资源优化
- 大数据表格使用虚拟滚动
- 合理使用缓存策略

### 后端性能
- 数据库查询优化
- 实现接口缓存
- 大数据量分页处理
- 异步处理耗时操作

## 测试规范

### 单元测试
- 核心业务逻辑覆盖率 > 80%
- 碳排放计算函数必须有测试
- 温度监控逻辑必须有测试

### 集成测试
- API 接口测试
- 数据库操作测试
- 第三方服务集成测试

## 部署规范

### 环境配置
- 开发环境 (development)
- 测试环境 (staging)
- 生产环境 (production)

### 容器化
- 使用 Docker 容器化部署
- 编写 docker-compose 文件
- 配置健康检查

## 文档规范

### API 文档
- 使用 Swagger/OpenAPI 自动生成
- 包含请求/响应示例
- 错误码说明

### 业务文档
- 碳排放计算方法说明
- 系统架构图
- 数据流程图
- 用户操作手册

## 代码审查规范

### 必须审查项
- 业务逻辑正确性
- 代码安全性
- 性能影响
- 测试覆盖率
- 文档完整性

### 禁止事项
- 硬编码敏感信息
- 未处理的异常
- 无意义的变量名
- 过长的函数/方法
- 重复代码

## 监控和日志

### 日志规范
- 使用结构化日志
- 记录关键业务操作
- 错误日志包含堆栈信息
- 敏感信息不记录到日志

### 监控指标
- API 响应时间
- 数据库连接数
- 内存使用率
- 碳排放数据异常
- 温度监控异常

## 国际化

### 多语言支持
- 中文 (简体) - 默认
- 英文 - 可选
- 使用 i18n 库
- 数值格式本地化

---

遵循以上规则，确保项目代码质量、可维护性和业务需求的准确实现。 