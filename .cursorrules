# 冷库物流园区碳排放检测管理系统 - Cursor 开发规则

## 项目概述
这是一个冷库物流园区的碳排放检测管理系统，提供后台面板展示和管理功能。
技术栈：NestJS (后端) + React (前端) + Ant Design (UI) + Python FastAPI (数据服务)

## 技术栈规范

### 后端 (NestJS)
- 使用 TypeScript 严格模式
- 遵循 NestJS 官方架构模式：Controller -> Service -> Repository
- 使用 class-validator 进行数据验证
- 使用 class-transformer 进行数据转换
- 统一使用 DTO (Data Transfer Object) 模式
- 数据库操作使用 TypeORM 或 Prisma
- 环境配置使用 @nestjs/config
- 日志记录使用 @nestjs/common Logger
- API 文档使用 @nestjs/swagger

### 前端 (React + Ant Design)
- 使用 TypeScript 严格模式
- 使用 React 18+ 函数组件和 Hooks
- 状态管理优先使用 Zustand，复杂场景考虑 Redux Toolkit
- 路由使用 React Router v6
- HTTP 请求使用 Axios 并封装统一的 API 客户端
- 表单处理使用 Ant Design Form 组件
- 图表展示使用 @ant-design/charts 或 ECharts
- 样式使用 CSS Modules 或 styled-components

### Python FastAPI (数据服务)
- 使用 Python 3.9+
- 遵循 PEP 8 代码规范
- 使用 Pydantic 进行数据验证
- 异步编程使用 async/await
- 数据库操作使用 SQLAlchemy 2.0+
- API 文档自动生成

## 项目结构规范

### 后端目录结构
```
backend/
├── src/
│   ├── modules/           # 业务模块
│   │   ├── auth/         # 认证模块
│   │   ├── carbon/       # 碳排放管理
│   │   ├── warehouse/    # 冷库管理
│   │   ├── logistics/    # 物流管理
│   │   └── dashboard/    # 仪表板
│   ├── common/           # 公共模块
│   │   ├── decorators/   # 装饰器
│   │   ├── filters/      # 异常过滤器
│   │   ├── guards/       # 守卫
│   │   ├── interceptors/ # 拦截器
│   │   └── pipes/        # 管道
│   ├── config/           # 配置文件
│   └── database/         # 数据库相关
├── test/                 # 测试文件
└── docs/                 # 文档
```

### 前端目录结构
```
frontend/
├── src/
│   ├── components/       # 通用组件
│   ├── pages/           # 页面组件
│   │   ├── dashboard/   # 仪表板
│   │   ├── carbon/      # 碳排放管理
│   │   ├── warehouse/   # 冷库管理
│   │   └── logistics/   # 物流管理
│   ├── hooks/           # 自定义 Hooks
│   ├── services/        # API 服务
│   ├── stores/          # 状态管理
│   ├── utils/           # 工具函数
│   ├── types/           # TypeScript 类型定义
│   ├── mock/            # Mock 数据服务
│   └── assets/          # 静态资源
├── public/              # 公共资源
└── docs/                # 文档
```

## 数据库设计规范

### 数据库设计原则
- 使用 PostgreSQL 作为主数据库
- 所有表名使用小写下划线命名 (snake_case)
- 主键统一使用 `id` 字段，类型为 UUID
- 时间字段统一使用 `created_at`、`updated_at`、`deleted_at`
- 软删除支持，使用 `deleted_at` 字段
- 所有金额字段使用 DECIMAL 类型，精度为 (15,2)
- 温度字段精度为 (5,1)，支持 -999.9 到 9999.9°C
- 碳排放量字段精度为 (15,3)，单位为 CO2e 吨

### 核心数据表
参考 `docs/database-design.md` 中的完整表结构定义，包括：
1. 用户认证与权限管理模块表
2. 冷库管理模块表
3. 碳排放管理模块表
4. 物流管理模块表
5. 告警与通知模块表
6. 系统配置模块表
7. 数据分析与报表模块表

### 索引优化规则
- 为经常查询的字段创建索引
- 时间字段必须有索引 (如 recorded_at, created_at)
- 复合索引优先考虑查询频率高的字段组合
- 大数据量表考虑分区策略

## API 接口规范

### REST API 设计原则
- 遵循 RESTful API 设计规范
- 统一使用 JSON 格式进行数据交换
- 支持分页查询，使用 `page` 和 `limit` 参数
- 统一的错误响应格式
- 支持字段过滤和排序
- 所有时间字段使用 ISO 8601 格式

### 统一响应格式
```typescript
// 成功响应
interface ApiResponse<T> {
  success: true;
  data: T;
  message?: string;
  timestamp: string;
}

// 分页响应
interface PaginatedResponse<T> {
  success: true;
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
  timestamp: string;
}

// 错误响应
interface ApiError {
  success: false;
  error: {
    code: string;
    message: string;
    details?: any;
  };
  timestamp: string;
}
```

### 接口路径规范
```
/api/auth/*              # 认证相关
/api/users/*             # 用户管理
/api/warehouses/*        # 冷库管理
/api/carbon-emissions/*  # 碳排放管理
/api/inventory/*         # 库存管理
/api/vehicles/*          # 车辆管理
/api/transport-records/* # 运输记录
/api/alerts/*            # 告警管理
/api/dashboard/*         # 仪表板数据
```

### HTTP 状态码规范
- `200` - 请求成功
- `201` - 创建成功
- `400` - 请求参数错误
- `401` - 未授权
- `403` - 权限不足
- `404` - 资源不存在
- `409` - 资源冲突
- `422` - 验证失败
- `500` - 服务器内部错误

## Mock 数据服务规范

### Mock 服务架构
- 使用 MSW (Mock Service Worker) 进行接口模拟
- 使用 Faker.js 生成真实感测试数据
- LocalStorage 实现数据持久化
- 支持环境变量控制开启/关闭

### Mock 数据生成规则
1. **时间数据**: 使用相对时间，如最近 30 天、近 12 个月
2. **数值数据**: 使用合理的随机范围，符合业务逻辑
3. **状态数据**: 覆盖所有可能的状态值
4. **关联数据**: 保持数据间的逻辑一致性
5. **分页数据**: 支持标准分页参数

### 可 Mock 接口标识 🎭
优先 Mock 的基础数据接口：
- `GET /api/users` - 用户列表
- `GET /api/warehouses` - 冷库列表
- `GET /api/warehouses/:id/zones` - 存储区域
- `GET /api/warehouses/:id/equipment` - 设备列表
- `GET /api/emission-sources` - 排放源列表
- `GET /api/emission-factors` - 排放因子列表

建议 Mock 的业务数据接口：
- `GET /api/warehouses/:id/environmental-data` - 环境监控数据
- `GET /api/carbon-emissions` - 碳排放记录
- `GET /api/carbon-emissions/summary` - 碳排放汇总
- `GET /api/dashboard/overview` - 仪表板概览
- `GET /api/dashboard/charts` - 图表数据

## 代码规范

### 命名规范
- 文件名：使用 kebab-case (如：carbon-emission.service.ts)
- 类名：使用 PascalCase (如：CarbonEmissionService)
- 变量/函数名：使用 camelCase (如：calculateEmission)
- 常量：使用 UPPER_SNAKE_CASE (如：MAX_TEMPERATURE)
- 接口：使用 I 前缀 (如：ICarbonData)
- 类型：使用 T 前缀 (如：TEmissionLevel)

### 数据类型定义规范
```typescript
// 温度相关
type Temperature = number; // 精度 0.1°C，范围 -999.9 到 9999.9
type Humidity = number;    // 精度 0.1%，范围 0-100

// 碳排放相关
type EmissionAmount = number; // 精度 0.001，单位 tCO2e
type EmissionFactor = number; // 精度 0.000001

// 状态枚举
enum WarehouseStatus {
  ACTIVE = 1,      // 运营中
  MAINTENANCE = 0, // 维护中
  INACTIVE = -1    // 停用
}

enum AlertSeverity {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical'
}
```

### 注释规范
- 所有公共 API 必须有 JSDoc 注释
- 复杂业务逻辑必须有中文注释说明
- 碳排放计算公式必须详细注释
- 温度监控阈值设置必须注释说明

### Git 提交规范
使用 Conventional Commits 格式：
- feat: 新功能
- fix: 修复
- docs: 文档
- style: 格式
- refactor: 重构
- test: 测试
- chore: 构建/工具

示例：
```
feat(carbon): 添加碳排放实时监控功能
fix(warehouse): 修复冷库温度异常报警逻辑
docs(api): 更新碳排放API文档
```

## 业务领域规范

### 碳排放相关
- 所有碳排放数据使用 CO2 当量 (CO2e) 单位
- 排放因子数据必须可配置和更新
- 计算结果保留小数点后 2 位
- 支持多种排放源：电力、燃料、制冷剂等
- 排放范围分类：scope1(直接排放)、scope2(间接排放-电力)、scope3(其他间接排放)

### 冷库管理相关
- 温度数据精确到 0.1°C
- 湿度数据精确到 0.1%
- 能耗数据使用 kWh 单位
- 支持多区域、多温区管理
- 区域类型：冷冻区(-25°C至-15°C)、冷藏区(-5°C至5°C)、常温区(15°C至25°C)

### 物流管理相关
- 运输距离使用公里(km)为单位
- 燃料消耗使用升(L)为单位
- 载重量使用吨(t)为单位
- 冷链完整性监控必须记录

### 数据处理规范
- 所有时间使用 ISO 8601 格式 (YYYY-MM-DDTHH:mm:ss.sssZ)
- 数据库时间统一使用 UTC
- 前端显示时间转换为本地时区
- 大数值使用千分位分隔符显示
- 货币金额统一使用人民币(CNY)

## 安全规范

### 认证授权
- 使用 JWT 进行身份认证
- 实现基于角色的访问控制 (RBAC)
- 敏感操作需要二次验证
- API 接口必须有权限验证
- Token 过期时间设置为 1 小时，RefreshToken 7 天

### 数据安全
- 敏感数据必须加密存储 (密码、密钥等)
- 数据传输使用 HTTPS
- 实现数据脱敏显示 (日志中不记录敏感信息)
- 定期备份重要数据
- 实现操作审计日志记录

### 权限层级
```
超级管理员 (admin)：全部权限
园区管理员 (manager)：园区内所有数据管理权限
操作员 (operator)：日常操作权限，无删除权限
查看者 (viewer)：只读权限
```

## 性能规范

### 前端性能
- 组件懒加载，路由级别代码分割
- 图片资源优化，使用 WebP 格式
- 大数据表格使用虚拟滚动 (Ant Design Table virtualScroll)
- 图表数据超过 1000 点时启用数据采样
- 合理使用缓存策略 (React Query 或 SWR)

### 后端性能
- 数据库查询优化，避免 N+1 查询
- 实现接口缓存 (Redis)，环境数据缓存 5 分钟
- 大数据量分页处理，单页最大 100 条记录
- 异步处理耗时操作 (报表生成、数据导出)
- 环境监控数据按月分区存储

### 数据库性能
- 环境数据保留最近 2 年，历史数据归档
- 碳排放数据永久保存，按年分区
- 操作日志保留 1 年
- 定期执行 VACUUM 和 ANALYZE

## 测试规范

### 单元测试
- 核心业务逻辑覆盖率 > 80%
- 碳排放计算函数必须有测试，覆盖率 100%
- 温度监控逻辑必须有测试
- 权限验证逻辑必须有测试

### 集成测试
- API 接口测试，覆盖所有 CRUD 操作
- 数据库操作测试
- 第三方服务集成测试
- 告警系统端到端测试

### Mock 测试
- 前端组件使用 Mock 数据进行单元测试
- API 接口使用 Mock 进行集成测试
- 覆盖异常场景和边界条件

## 部署规范

### 环境配置
- 开发环境 (development)：使用 Mock 数据
- 测试环境 (staging)：使用测试数据库
- 生产环境 (production)：使用生产数据库

### 容器化
- 使用 Docker 容器化部署
- 编写 docker-compose 文件
- 配置健康检查接口 (/health)
- 实现优雅关闭

### 监控配置
- 应用性能监控 (APM)
- 数据库性能监控
- 业务指标监控 (碳排放异常、温度异常)
- 日志聚合和分析

## 文档规范

### API 文档
- 使用 Swagger/OpenAPI 自动生成
- 包含请求/响应示例
- 错误码说明
- 认证方式说明

### 业务文档
- 碳排放计算方法说明 (包含排放因子来源)
- 系统架构图
- 数据流程图
- 用户操作手册
- 部署运维手册

### 代码文档
- README.md 包含快速开始指南
- 数据库设计文档 (docs/database-design.md)
- API 接口规范 (docs/api-specification.md)
- Mock 数据规范 (docs/mock-data-specification.md)

## 代码审查规范

### 必须审查项
- 业务逻辑正确性 (特别是碳排放计算)
- 代码安全性 (SQL注入、XSS防护)
- 性能影响 (数据库查询、内存使用)
- 测试覆盖率
- 文档完整性

### 禁止事项
- 硬编码敏感信息 (密码、密钥、IP地址)
- 未处理的异常 (必须有 try-catch 或错误边界)
- 无意义的变量名 (如 a, b, data1)
- 过长的函数/方法 (超过 50 行需要重构)
- 重复代码 (DRY 原则)

## 监控和日志

### 日志规范
- 使用结构化日志 (JSON 格式)
- 记录关键业务操作 (登录、数据修改、告警处理)
- 错误日志包含堆栈信息和上下文
- 敏感信息不记录到日志 (密码、token)
- 日志级别：ERROR、WARN、INFO、DEBUG

### 监控指标
- API 响应时间 (P95 < 500ms)
- 数据库连接数 (< 80% 最大连接数)
- 内存使用率 (< 80%)
- 碳排放数据异常 (超过阈值 20%)
- 温度监控异常 (超出设定范围)
- 告警响应时间 (< 5 分钟)

### 告警配置
- 系统异常告警 (服务不可用、数据库连接失败)
- 业务异常告警 (温度超标、设备故障)
- 性能异常告警 (响应时间过长、内存使用率过高)

## 国际化

### 多语言支持
- 中文 (简体) - 默认
- 英文 - 可选
- 使用 react-i18next 或 antd 国际化
- 数值格式本地化 (千分位、小数点)
- 时间格式本地化

### 文本管理
- 所有显示文本使用国际化键值
- 错误消息多语言支持
- 业务术语统一翻译

## 开发工作流程

### 功能开发流程
1. 创建功能分支 (feature/模块名-功能描述)
2. 根据数据库设计创建或更新数据模型
3. 实现 API 接口，遵循接口规范
4. 创建或更新 Mock 数据
5. 开发前端页面，使用 Mock 数据
6. 编写单元测试和集成测试
7. 代码审查
8. 合并到主分支

### Mock 数据开发流程
1. 前端开发阶段：启用 Mock 服务
2. 接口联调阶段：逐步替换为真实 API
3. 生产部署：完全关闭 Mock 服务

---

遵循以上规则，确保项目代码质量、可维护性和业务需求的准确实现。
所有开发必须严格按照数据库设计、API 规范和 Mock 数据规范进行，确保前后端开发的一致性和高效协作。 