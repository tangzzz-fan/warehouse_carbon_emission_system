version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: carbon-emission-postgres-0527
    environment:
      POSTGRES_DB: carbon_emission_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - carbon-emission-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: carbon-emission-redis-0527
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - carbon-emission-network

  # NestJS 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: carbon-emission-backend-0527
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: carbon_emission_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: carbon-emission-secret-key
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - carbon-emission-network
    command: npm run start:dev

  # React 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: carbon-emission-frontend-0527
    environment:
      REACT_APP_API_URL: http://localhost:3001/api/v1
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - carbon-emission-network
    command: npm start

  # Python FastAPI 数据服务
  data-service:
    build:
      context: ./data-service
      dockerfile: Dockerfile
    container_name: carbon-emission-data-service-0527
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/carbon_emission_db
      REDIS_URL: redis://redis:6379
      DEBUG: true
      HOST: 0.0.0.0
      PORT: 8000
    ports:
      - "8000:8000"
    volumes:
      - ./data-service:/app
    depends_on:
      - postgres
      - redis
    networks:
      - carbon-emission-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
  redis_data:


networks:
  carbon-emission-network:
    driver: bridge
